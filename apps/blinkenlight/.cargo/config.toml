[target.thumbv7em-none-eabi]
runner = "probe-rs run --chip STM32G431KBTx"

# uncomment this to make `cargo run` execute programs on QEMU
# runner = "qemu-system-arm -cpu cortex-m3 -machine lm3s6965evb -nographic -semihosting-config enable=on,target=native -kernel"

[target.'cfg(all(target_arch = "arm", target_os = "none"))']
# uncomment ONE of these three option to make `cargo run` start a GDB session
# which option to pick depends on your system
# runner = "arm-none-eabi-gdb -q -x openocd.gdb"
# runner = "gdb-multiarch -q -x openocd.gdb"
# runner = "gdb -q -x openocd.gdb"

rustflags = [
    # Previously, the linker arguments --nmagic and -Tlink.x were set here.
    # They are now set by build.rs instead. The linker argument can still
    # only be set here, if a custom linker is needed.

    # By default, the LLD linker is used, which is shipped with the Rust
    # toolchain. If you run into problems with LLD, you can switch to the
    # GNU linker by uncommenting this line:
    # "-C", "linker=arm-none-eabi-ld",

    # If you need to link to pre-compiled C libraries provided by a C toolchain
    # use GCC as the linker by uncommenting the three lines below:
    # "-C", "linker=arm-none-eabi-gcc",
    # "-C", "link-arg=-Wl,-Tlink.x",
    # "-C", "link-arg=-nostartfiles",
]

[build]
target = "thumbv7em-none-eabi" # Cortex-M4 and Cortex-M7 (no FPU)
